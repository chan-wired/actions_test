name: CI

on:
  push:
    branches: [ main, stage, devel ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

  printJob:
    name: Print event
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

  slask:
    name: notify to slack for build result
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check PR method
        uses: actions/github-script@v5.0.0
        if: always() && contains('refs/heads/main', github.ref) && github.event.commits[0].author.email != 'bot@renovateapp.com'
        id: check-merge-method
        with:
          result-encoding: string
          script: |
            const commitMessage = process.env.COMMIT_MESSAGE
            const regexToCheckIsMergedByCommit = /Merge pull request/
            const isMergedByCommit = !!commitMessage.match(regexToCheckIsMergedByCommit)

            return isMergedByCommit ? "commit" : "rebase"
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      - name: Set alert message
        uses: actions/github-script@v5.0.0
        if: always() && contains('refs/heads/main', github.ref) && github.event.commits[0].author.email != 'bot@renovateapp.com'
        id: set-alert-message
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const prMethod = "${{ steps.check-merge-method.outputs.result }}"
            const commitMessage = process.env.COMMIT_MESSAGE

            if (prMethod === "commit") {
              const regexToParseNumber = /[0-9]+/
              const prNumber = Number(commitMessage.match(regexToParseNumber)[0])
              const pullRequest = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              })

              return `Pull Requestã…¤#${prNumber} [ ${pullRequest.data.title} ] is released...`
            } else {
              return `Last commit ${commitMessage} is released.`
            }
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      - name: Release Slack Alert (Dev)
        uses: 8398a7/action-slack@v3
        if: always() && contains('refs/heads/main', github.ref) && github.event.commits[0].author.email != 'bot@renovateapp.com'
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,ref,workflow # selectable (default: repo,message)
          text: ${{ steps.set-alert-message.outputs.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_DEV }}

  jira:
    name: Trigger Jira Webhook
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/devel' && github.event.commits[0].author.email != 'bot@renovateapp.com'
    steps:
      - name: Parse deployed tickets
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
        run: npm install axios
        uses: actions/github-script@v5.0.0
        id: parse-deployed-tickets
        with:
          result-encoding: string
          script: |
            const axios = require('axios');
            const github2 = JSON.parse(process.env.GITHUB)
            const regexToParseTicketNumber = /^(HC2-[0-9]*)/g
            const tickets = []
            github2.event.commits.forEach((commit) => {
              const ticket = commit.message.match(regexToParseTicketNumber)
              if (ticket) {
                tickets.push(ticket[0])
              }
            })

            axios({
              url: 'https://automation.atlassian.com/pro/hooks/bda29b370de7e6f07a2854f1eb3600362a40611a',
              method: 'post',
              headers: {'Content-type': 'application/json'},
              data: {
                issues: tickets,
                data: {
                  releaseVersion: "0.1.0"
                }
              }
            })
        env:
          GITHUB: ${{ toJson(github) }}
